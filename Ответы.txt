************************************

1. В чём отличие относительного пути от абсолютного? Когда необходимо их использовать?
Абсолютный путь - это полный путь к файлу, начиная с названия диска. Относительный путь - путь начинающийся от директории, в которой сейчас находимся. Абсолютный путь предоставляет полный, точный путь к необходимому файлу, а относительный предоставляет путь относительно какой-либо папки, директории. Как я считаю, относительный путь лучше использовать, если файл находится возле той директории, в которой находимся, а относительный путь если файл находится далеко от директории, в которой находимся и чтобы знать точный путь к файлу.

************************************

2. Зачем нужны делегаты Action и Func? Почему не принято создавать свои делегаты?
Action - указывает на метод, ссылка на метод, тип делагата, указывающий на метод без возвращаемого значения, на метод void. Func также, как и Action, указывает на метод, но уже указывает на методы с возвращаемым значением. Не принято создавать свои делегаты потому, что существуют Action и Func, которые могут принимать до 16 типов параметров, этих двух делегатов должно хватить для использования.

************************************

3. Зачем использовать лямбда-выражения? Как их передать в метод?
Лямбда-выражения очень удобны и компактны, они занимают раньше строк кода, более легкая запись анонимных методов, методов, которые не имеют имени, модификаторов доступа. 
Чтобы передать лямбда-выражение в метод, нужно использовать делегаты Action или Func(в зависимости от возвращаемого значения)

************************************

4. Что делать если класс реализует интерфейсы у которых совпадает сигнатура методов?
Реализовать метод(ы) для каждого интерфейса, при реализации указать к какому именно интерфейсу относится метод(ITest.Method() INotTest.Method() )

************************************

5. Объясните принцип полиморфизма на примере транспорта.
Полиморфизм позволяет иметь объектам различную реализацию. Допустим у нас есть классы Transport, Car, Bus, Train и подобные. Классы Car, Bus, Train наследуются от класса Transport, у класса Transport есть методы, которые характеры каждому виду транспорта, например "ездить", каждый транспорт выползет его по-разному, чтобы ему было удобно. И полиморфизм позволяет сделать так, чтобы переопределить метод. Допустим в классе Transport метод реализован так: Console.WriteLine("Ехать по дороге");, данная реализация метода подходит под классы Car и Bus, однако, не подходит для класса Train. В данной ситуации и пригодится принцип полиморфизма, можно переопределить метод, чтобы он соответствовал классу Train, вот так, например: Console.WriteLine("Ехать по рельсам");



